name: Reusable dan deploy workflow

on:
  workflow_call:
    inputs:
      dotnet_version:
        type: string
        required: false
        default: '6.0.x'
      build_configuration:
        type: string
        default: 'Release'
        required: false
      root_solution_path:
        type: string
        default: './'
        required: false
      artifact_name:
        type: string
        default: 'artifact'
        required: false
      function_project_path:
        type: string
        required: true
      staging_slot_name:
        type: string
        required: false
        default: 'staging'
      production_slot_name:
        type: string
        required: false
        default: 'production'
      run_e2e_tests:
        type: boolean
        required: false
        default: false
    secrets:
      function_app_name:
        required: true
      publish_profile:
        required: true
      azure_credentials:
        required: true
      resource_group_prod:
        required: true
      kvname:
        required: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ inputs.dotnet_version }}
      - name: 'Dotnet restore, build & test'
        run: |
          dotnet restore
          dotnet build --no-restore
          dotnet test --no-build --verbosity normal
        working-directory: ${{ inputs.root_solution_path }}
      - name: Dotnet build and publish Function App with configuration '${{ inputs.build_configuration }}'
        run: |
          dotnet build --configuration '${{ inputs.build_configuration }}'
          dotnet publish -c '${{ inputs.build_configuration }}' --no-restore -o './published-app'
        working-directory: ${{ inputs.function_project_path }}
      - name: Upload artifact '${{ inputs.artifact_name }}'
        uses: actions/upload-artifact@v2
        with:
          name: ${{ inputs.artifact_name }}
          path: ${{ inputs.function_project_path }}/published-app
  
  deploy-dev:
    runs-on: ubuntu-latest
    environment: 'dev'
    needs: [build]
    steps:
      - name: 'Download artifact for dev'
        uses: actions/download-artifact@v2
        with:
          name: ${{ inputs.artifact_name }}
          path: './downloaded-app'
      - name: 'Deploy artifact to dev'
        uses: azure/functions-action@v1
        with:
          app-name: ${{secrets.function_app_name}}
          package: './downloaded-app'
          publish-profile: ${{secrets.publish_profile}}

  post-deploy-dev:
    runs-on: ubuntu-latest
    if: inputs.run_e2e_tests
    environment: 'dev'
    needs: [deploy-dev]
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2
        with:
          repository: data-altinn-no/k6-tests
      - name: 'Install K6'
        run: |
          sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6
      - name: 'Azure login'
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: 'Setup environment variables'
        uses: azure/CLI@v1
        with:
          azcliversion: 2.30.0
          inlineScript: |
            az keyvault secret download --vault-name ${{ secrets.kvname }} -n "digdir-cert" -e base64 -f "cert.pfx"
            openssl pkcs12 -in cert.pfx -nokeys -clcerts -password pass: -out cert.pem
            openssl pkcs12 -in cert.pfx -nocerts -password pass: -out key.pem -nodes
            echo subscriptions=$(az keyvault secret show --name "dev-subscriptions" --vault-name ${{ secrets.kvname }} --query "value") >> $GITHUB_ENV
            echo tokenUsername=$(az keyvault secret show --name "TokenUsername" --vault-name ${{ secrets.kvname }} --query "value") >> $GITHUB_ENV
            echo tokenPassword=$(az keyvault secret show --name "TokenPassword" --vault-name ${{ secrets.kvname }} --query "value") >> $GITHUB_ENV
            echo certificate=cert.pem >> $GITHUB_ENV
            echo key=key.pem >> $GITHUB_ENV
            echo useToken=true >> $GITHUB_ENV
      - name: 'Run K6 tests'
        uses: grafana/k6-action@v0.2.0
        with:
          filename: postDeployTests.js
          flags: --quiet --log-output=stdout --include-system-env-vars
      - name: 'K6 results'
        uses: dorny/test-reporter@v1
        with:
          name: 'test-results'
          path: 'junit.xml'
      - name: 'Remove Certificate files'
        run: rm cert.pem key.pem

  
  deploy-staging:
    runs-on: ubuntu-latest
    environment: 'staging'
    needs: [deploy-dev]
    steps:
      - name: 'Download artifact for staging'
        uses: actions/download-artifact@v2
        with:
          name: ${{ inputs.artifact_name }}
          path: './downloaded-app'
      - name: 'Deploy artifact to staging'
        uses: azure/functions-action@v1
        with:
          app-name: ${{secrets.function_app_name}}
          package: './downloaded-app'
          publish-profile: ${{secrets.publish_profile}}

  swap-staging-prod:
    runs-on: ubuntu-latest
    environment: 'production'
    needs: [deploy-staging]
    steps:
      - name: 'Login via Azure CLI'
        uses: azure/login@v1
        with:
          creds: ${{ secrets.azure_credentials }}
      - name: 'Swap staging and production'
        run: |
          az webapp deployment slot swap -g '${{ secrets.resource_group_prod }}' -n '${{ secrets.function_app_name }}' --slot '${{ inputs.staging_slot_name }}' --target-slot '${{ inputs.production_slot_name }}'
      - name: 'Azure logout'
        run: |
          az logout

  redeploy-staging:
    runs-on: ubuntu-latest
    environment: 'staging'
    needs: [swap-staging-prod]
    steps:
      - name: 'Download artifact for redeploy to staging'
        uses: actions/download-artifact@v2
        with:
          name: ${{ inputs.artifact_name }}
          path: './downloaded-app'
      - name: 'Redeploy artifact to staging'
        uses: azure/functions-action@v1
        with:
          app-name: ${{secrets.function_app_name}}
          package: './downloaded-app'
          publish-profile: ${{secrets.publish_profile}}
        
